Terminals unused in grammar

    UNDERSCORE
    OR
    MOD_EQ
    BIT_AND_EQ
    BIT_OR_EQ
    BIT_XOR_EQ
    SHL_EQ
    SHR_EQ
    MOD
    METHOD_CALL
    FUNC_CALL


State 86 conflicts: 1 shift/reduce
State 87 conflicts: 1 shift/reduce
State 88 conflicts: 1 shift/reduce
State 90 conflicts: 1 shift/reduce
State 91 conflicts: 1 shift/reduce
State 93 conflicts: 1 shift/reduce
State 95 conflicts: 1 shift/reduce
State 96 conflicts: 1 shift/reduce
State 137 conflicts: 1 shift/reduce
State 138 conflicts: 1 shift/reduce
State 139 conflicts: 1 shift/reduce
State 140 conflicts: 1 shift/reduce
State 141 conflicts: 1 shift/reduce
State 142 conflicts: 1 shift/reduce
State 143 conflicts: 1 shift/reduce
State 144 conflicts: 1 shift/reduce
State 145 conflicts: 1 shift/reduce
State 146 conflicts: 1 shift/reduce
State 147 conflicts: 1 shift/reduce
State 148 conflicts: 1 shift/reduce
State 149 conflicts: 1 shift/reduce
State 150 conflicts: 1 shift/reduce
State 151 conflicts: 1 shift/reduce
State 152 conflicts: 1 shift/reduce
State 153 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: item_list

    2 item_list: item_list item
    3          | item

    4 item: function_decl

    5 function_decl: FN IDENTIFIER func_decl_args ARROW type block_expr
    6              | FN IDENTIFIER func_decl_args block_expr

    7 func_decl_args: LPAREN func_arg_list RPAREN
    8               | LPAREN RPAREN
    9               | error

   10 func_arg_list: func_arg_list COMMA func_arg
   11              | func_arg

   12 func_arg: opt_mut IDENTIFIER COLON type

   13 stmt: SEMICOLON
   14     | let
   15     | expr_stmt SEMICOLON
   16     | print_ln SEMICOLON
   17     | item

   18 stmt_list: stmt_list stmt
   19          | stmt_list error
   20          | stmt

   21 print_ln: PRINT_LN LPAREN STR_LITERAL RPAREN

   22 type_decl: COLON type
   23          | COLON error
   24          | ε

   25 opt_mut: MUT
   26        | ε

   27 ident: IDENTIFIER

   28 let: LET opt_mut ident type_decl EQ expr SEMICOLON
   29    | LET opt_mut ident type_decl SEMICOLON

   30 if_expr: IF expr block_expr
   31        | IF expr block_expr ELSE if_expr
   32        | IF expr block_expr ELSE block_expr

   33 type_list: type_list COMMA type
   34          | type

   35 type: I8
   36     | I16
   37     | I32
   38     | I64
   39     | ISIZE
   40     | U8
   41     | U16
   42     | U32
   43     | U64
   44     | USIZE
   45     | BOOL
   46     | LPAREN type_list RPAREN
   47     | LPAREN RPAREN

   48 block_expr: LBRACE stmt_list RBRACE
   49           | LBRACE stmt_list expr RBRACE
   50           | LBRACE expr RBRACE
   51           | LBRACE RBRACE

   52 unary_op_expr: MINUS expr
   53              | STAR expr
   54              | BANG expr
   55              | AMPERSAND expr
   56              | AMPERSAND_MUT expr

   57 bin_op_expr: expr PLUS expr
   58            | expr MINUS expr
   59            | expr STAR expr
   60            | expr SLASH expr
   61            | expr L_AND expr
   62            | expr L_OR expr
   63            | expr EQEQ expr
   64            | expr NE expr
   65            | expr LT expr
   66            | expr GT expr
   67            | expr GE expr
   68            | expr LE expr
   69            | expr EQ expr
   70            | expr PLUS_EQ expr
   71            | expr MIN_EQ expr
   72            | expr DIV_EQ expr
   73            | expr MUL_EQ expr

   74 literal: DEC_LITERAL
   75        | STR_LITERAL
   76        | FLOAT_LITERAL
   77        | TRUE
   78        | FALSE

   79 call_expr_args: call_expr_args COMMA expr
   80               | expr

   81 call_expr: IDENTIFIER LPAREN call_expr_args RPAREN
   82          | IDENTIFIER LPAREN RPAREN

   83 while_expr: WHILE expr block_expr

   84 tuple_index_expr: expr DOT DEC_LITERAL

   85 expr: expr_w_block
   86     | expr_wo_block

   87 expr_list: expr_list COMMA expr
   88          | expr

   89 expr_stmt: expr_w_block
   90          | expr_wo_block

   91 expr_w_block: while_expr
   92             | if_expr
   93             | block_expr

   94 expr_wo_block: LPAREN expr RPAREN
   95              | bin_op_expr
   96              | tuple_index_expr
   97              | IDENTIFIER
   98              | unary_op_expr
   99              | LPAREN RPAREN
  100              | call_expr
  101              | RETURN expr
  102              | BREAK expr
  103              | CONTINUE
  104              | LPAREN expr_list opt_comma RPAREN
  105              | literal

  106 opt_comma: COMMA
  107          | ε


Terminals, with rules where they appear

    $end (0) 0
    error (256) 9 19 23
    DEC_LITERAL <Token> (258) 74 84
    FLOAT_LITERAL <Token> (259) 76
    STR_LITERAL <Token> (260) 21 75
    TRUE <Token> (261) 77
    FALSE <Token> (262) 78
    IDENTIFIER <Token> (263) 5 6 12 27 81 82 97
    UNDERSCORE <Token> (264)
    I8 <Token> (265) 35
    I16 <Token> (266) 36
    I32 <Token> (267) 37
    I64 <Token> (268) 38
    ISIZE <Token> (269) 39
    U8 <Token> (270) 40
    U16 <Token> (271) 41
    U32 <Token> (272) 42
    U64 <Token> (273) 43
    USIZE <Token> (274) 44
    LET <Token> (275) 28 29
    MUT <Token> (276) 25
    BOOL <Token> (277) 45
    FN <Token> (278) 5 6
    WHILE <Token> (279) 83
    PRINT_LN <Token> (280) 21
    EQ <Token> (281) 28 69
    EQEQ <Token> (282) 63
    NE <Token> (283) 64
    BANG <Token> (284) 54
    LT <Token> (285) 65
    LE <Token> (286) 68
    GT <Token> (287) 66
    GE <Token> (288) 67
    PLUS <Token> (289) 57
    MINUS <Token> (290) 52 58
    STAR <Token> (291) 53 59
    SLASH <Token> (292) 60
    COMMA <Token> (293) 10 33 79 87 106
    ARROW <Token> (294) 5
    IF <Token> (295) 30 31 32
    ELSE <Token> (296) 31 32
    RETURN <Token> (297) 101
    BREAK <Token> (298) 102
    CONTINUE <Token> (299) 103
    L_AND <Token> (300) 61
    L_OR <Token> (301) 62
    PLUS_EQ <Token> (302) 70
    MIN_EQ <Token> (303) 71
    MUL_EQ <Token> (304) 73
    DIV_EQ <Token> (305) 72
    LBRACE <Token> (306) 48 49 50 51
    RBRACE <Token> (307) 48 49 50 51
    LPAREN <Token> (308) 7 8 21 46 47 81 82 94 99 104
    RPAREN <Token> (309) 7 8 21 46 47 81 82 94 99 104
    SEMICOLON <Token> (310) 13 15 16 28 29
    COLON <Token> (311) 12 22 23
    AMPERSAND <Token> (312) 55
    OR <Token> (313)
    AMPERSAND_MUT <Token> (314) 56
    DOT <Token> (315) 84
    CONTROL_FLOW (316)
    MOD_EQ (317)
    BIT_AND_EQ (318)
    BIT_OR_EQ (319)
    BIT_XOR_EQ (320)
    SHL_EQ (321)
    SHR_EQ (322)
    MOD (323)
    BIN_OP (324)
    UMINUS (325)
    DEREF (326)
    NOT (327)
    REF (328)
    REF_MUT (329)
    UNARY (330)
    METHOD_CALL (331)
    FIELD_ACCESS (332)
    FUNC_CALL (333)
    CALL_INDEX (334)
    PATH (335)


Nonterminals, with rules where they appear

    $accept (81)
        on left: 0
    program <U<Ast>> (82)
        on left: 1
        on right: 0
    item_list <std::vector<U<Item>>> (83)
        on left: 2 3
        on right: 1 2
    item <U<Item>> (84)
        on left: 4
        on right: 2 3 17
    function_decl <U<FunDecl>> (85)
        on left: 5 6
        on right: 4
    func_decl_args <std::vector<FunArg>> (86)
        on left: 7 8 9
        on right: 5 6
    func_arg_list <std::vector<FunArg>> (87)
        on left: 10 11
        on right: 7 10
    func_arg <FunArg> (88)
        on left: 12
        on right: 10 11
    stmt <U<Stmt>> (89)
        on left: 13 14 15 16 17
        on right: 18 20
    stmt_list <std::vector<U<Stmt>>> (90)
        on left: 18 19 20
        on right: 18 19 48 49
    print_ln <U<PrintLn>> (91)
        on left: 21
        on right: 16
    type_decl <std::optional<Type>> (92)
        on left: 22 23 24
        on right: 28 29
    opt_mut <Mut> (93)
        on left: 25 26
        on right: 12 28 29
    ident <Identifier> (94)
        on left: 27
        on right: 28 29
    let <U<LetStmt>> (95)
        on left: 28 29
        on right: 14
    if_expr <U<IfElse>> (96)
        on left: 30 31 32
        on right: 31 92
    type_list <std::vector<Type>> (97)
        on left: 33 34
        on right: 33 46
    type <Type> (98)
        on left: 35 36 37 38 39 40 41 42 43 44 45 46 47
        on right: 5 12 22 33 34
    block_expr <U<BlockExpr>> (99)
        on left: 48 49 50 51
        on right: 5 6 30 31 32 83 93
    unary_op_expr <U<UnaryOpExpr>> (100)
        on left: 52 53 54 55 56
        on right: 98
    bin_op_expr <U<Expr>> (101)
        on left: 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73
        on right: 95
    literal <U<Literal>> (102)
        on left: 74 75 76 77 78
        on right: 105
    call_expr_args <std::vector<U<Expr>>> (103)
        on left: 79 80
        on right: 79 81
    call_expr <U<CallExpr>> (104)
        on left: 81 82
        on right: 100
    while_expr <U<WhileLoop>> (105)
        on left: 83
        on right: 91
    tuple_index_expr <U<TupleIndexExpr>> (106)
        on left: 84
        on right: 96
    expr <U<Expr>> (107)
        on left: 85 86
        on right: 28 30 31 32 49 50 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 79 80 83 84 87 88 94 101 102
    expr_list <std::vector<U<Expr>>> (108)
        on left: 87 88
        on right: 87 104
    expr_stmt <U<Expr>> (109)
        on left: 89 90
        on right: 15
    expr_w_block <U<Expr>> (110)
        on left: 91 92 93
        on right: 85 89
    expr_wo_block <U<Expr>> (111)
        on left: 94 95 96 97 98 99 100 101 102 103 104 105
        on right: 86 90
    opt_comma (112)
        on left: 106 107
        on right: 104


State 0

    0 $accept: • program $end

    FN  shift, and go to state 1

    program        go to state 2
    item_list      go to state 3
    item           go to state 4
    function_decl  go to state 5


State 1

    5 function_decl: FN • IDENTIFIER func_decl_args ARROW type block_expr
    6              | FN • IDENTIFIER func_decl_args block_expr

    IDENTIFIER  shift, and go to state 6


State 2

    0 $accept: program • $end

    $end  shift, and go to state 7


State 3

    1 program: item_list •
    2 item_list: item_list • item

    FN  shift, and go to state 1

    $default  reduce using rule 1 (program)

    item           go to state 8
    function_decl  go to state 5


State 4

    3 item_list: item •

    $default  reduce using rule 3 (item_list)


State 5

    4 item: function_decl •

    $default  reduce using rule 4 (item)


State 6

    5 function_decl: FN IDENTIFIER • func_decl_args ARROW type block_expr
    6              | FN IDENTIFIER • func_decl_args block_expr

    error   shift, and go to state 9
    LPAREN  shift, and go to state 10

    func_decl_args  go to state 11


State 7

    0 $accept: program $end •

    $default  accept


State 8

    2 item_list: item_list item •

    $default  reduce using rule 2 (item_list)


State 9

    9 func_decl_args: error •

    $default  reduce using rule 9 (func_decl_args)


State 10

    7 func_decl_args: LPAREN • func_arg_list RPAREN
    8               | LPAREN • RPAREN

    MUT     shift, and go to state 12
    RPAREN  shift, and go to state 13

    $default  reduce using rule 26 (opt_mut)

    func_arg_list  go to state 14
    func_arg       go to state 15
    opt_mut        go to state 16


State 11

    5 function_decl: FN IDENTIFIER func_decl_args • ARROW type block_expr
    6              | FN IDENTIFIER func_decl_args • block_expr

    ARROW   shift, and go to state 17
    LBRACE  shift, and go to state 18

    block_expr  go to state 19


State 12

   25 opt_mut: MUT •

    $default  reduce using rule 25 (opt_mut)


State 13

    8 func_decl_args: LPAREN RPAREN •

    $default  reduce using rule 8 (func_decl_args)


State 14

    7 func_decl_args: LPAREN func_arg_list • RPAREN
   10 func_arg_list: func_arg_list • COMMA func_arg

    COMMA   shift, and go to state 20
    RPAREN  shift, and go to state 21


State 15

   11 func_arg_list: func_arg •

    $default  reduce using rule 11 (func_arg_list)


State 16

   12 func_arg: opt_mut • IDENTIFIER COLON type

    IDENTIFIER  shift, and go to state 22


State 17

    5 function_decl: FN IDENTIFIER func_decl_args ARROW • type block_expr

    I8      shift, and go to state 23
    I16     shift, and go to state 24
    I32     shift, and go to state 25
    I64     shift, and go to state 26
    ISIZE   shift, and go to state 27
    U8      shift, and go to state 28
    U16     shift, and go to state 29
    U32     shift, and go to state 30
    U64     shift, and go to state 31
    USIZE   shift, and go to state 32
    BOOL    shift, and go to state 33
    LPAREN  shift, and go to state 34

    type  go to state 35


State 18

   48 block_expr: LBRACE • stmt_list RBRACE
   49           | LBRACE • stmt_list expr RBRACE
   50           | LBRACE • expr RBRACE
   51           | LBRACE • RBRACE

    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    LET            shift, and go to state 42
    FN             shift, and go to state 1
    WHILE          shift, and go to state 43
    PRINT_LN       shift, and go to state 44
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    RBRACE         shift, and go to state 52
    LPAREN         shift, and go to state 53
    SEMICOLON      shift, and go to state 54
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    item              go to state 57
    function_decl     go to state 5
    stmt              go to state 58
    stmt_list         go to state 59
    print_ln          go to state 60
    let               go to state 61
    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 70
    expr_stmt         go to state 71
    expr_w_block      go to state 72
    expr_wo_block     go to state 73


State 19

    6 function_decl: FN IDENTIFIER func_decl_args block_expr •

    $default  reduce using rule 6 (function_decl)


State 20

   10 func_arg_list: func_arg_list COMMA • func_arg

    MUT  shift, and go to state 12

    $default  reduce using rule 26 (opt_mut)

    func_arg  go to state 74
    opt_mut   go to state 16


State 21

    7 func_decl_args: LPAREN func_arg_list RPAREN •

    $default  reduce using rule 7 (func_decl_args)


State 22

   12 func_arg: opt_mut IDENTIFIER • COLON type

    COLON  shift, and go to state 75


State 23

   35 type: I8 •

    $default  reduce using rule 35 (type)


State 24

   36 type: I16 •

    $default  reduce using rule 36 (type)


State 25

   37 type: I32 •

    $default  reduce using rule 37 (type)


State 26

   38 type: I64 •

    $default  reduce using rule 38 (type)


State 27

   39 type: ISIZE •

    $default  reduce using rule 39 (type)


State 28

   40 type: U8 •

    $default  reduce using rule 40 (type)


State 29

   41 type: U16 •

    $default  reduce using rule 41 (type)


State 30

   42 type: U32 •

    $default  reduce using rule 42 (type)


State 31

   43 type: U64 •

    $default  reduce using rule 43 (type)


State 32

   44 type: USIZE •

    $default  reduce using rule 44 (type)


State 33

   45 type: BOOL •

    $default  reduce using rule 45 (type)


State 34

   46 type: LPAREN • type_list RPAREN
   47     | LPAREN • RPAREN

    I8      shift, and go to state 23
    I16     shift, and go to state 24
    I32     shift, and go to state 25
    I64     shift, and go to state 26
    ISIZE   shift, and go to state 27
    U8      shift, and go to state 28
    U16     shift, and go to state 29
    U32     shift, and go to state 30
    U64     shift, and go to state 31
    USIZE   shift, and go to state 32
    BOOL    shift, and go to state 33
    LPAREN  shift, and go to state 34
    RPAREN  shift, and go to state 76

    type_list  go to state 77
    type       go to state 78


State 35

    5 function_decl: FN IDENTIFIER func_decl_args ARROW type • block_expr

    LBRACE  shift, and go to state 18

    block_expr  go to state 79


State 36

   74 literal: DEC_LITERAL •

    $default  reduce using rule 74 (literal)


State 37

   76 literal: FLOAT_LITERAL •

    $default  reduce using rule 76 (literal)


State 38

   75 literal: STR_LITERAL •

    $default  reduce using rule 75 (literal)


State 39

   77 literal: TRUE •

    $default  reduce using rule 77 (literal)


State 40

   78 literal: FALSE •

    $default  reduce using rule 78 (literal)


State 41

   81 call_expr: IDENTIFIER • LPAREN call_expr_args RPAREN
   82          | IDENTIFIER • LPAREN RPAREN
   97 expr_wo_block: IDENTIFIER •

    LPAREN  shift, and go to state 80

    $default  reduce using rule 97 (expr_wo_block)


State 42

   28 let: LET • opt_mut ident type_decl EQ expr SEMICOLON
   29    | LET • opt_mut ident type_decl SEMICOLON

    MUT  shift, and go to state 12

    $default  reduce using rule 26 (opt_mut)

    opt_mut  go to state 81


State 43

   83 while_expr: WHILE • expr block_expr

    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    WHILE          shift, and go to state 43
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    LPAREN         shift, and go to state 53
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 82
    expr_w_block      go to state 83
    expr_wo_block     go to state 84


State 44

   21 print_ln: PRINT_LN • LPAREN STR_LITERAL RPAREN

    LPAREN  shift, and go to state 85


State 45

   54 unary_op_expr: BANG • expr

    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    WHILE          shift, and go to state 43
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    LPAREN         shift, and go to state 53
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 86
    expr_w_block      go to state 83
    expr_wo_block     go to state 84


State 46

   52 unary_op_expr: MINUS • expr

    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    WHILE          shift, and go to state 43
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    LPAREN         shift, and go to state 53
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 87
    expr_w_block      go to state 83
    expr_wo_block     go to state 84


State 47

   53 unary_op_expr: STAR • expr

    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    WHILE          shift, and go to state 43
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    LPAREN         shift, and go to state 53
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 88
    expr_w_block      go to state 83
    expr_wo_block     go to state 84


State 48

   30 if_expr: IF • expr block_expr
   31        | IF • expr block_expr ELSE if_expr
   32        | IF • expr block_expr ELSE block_expr

    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    WHILE          shift, and go to state 43
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    LPAREN         shift, and go to state 53
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 89
    expr_w_block      go to state 83
    expr_wo_block     go to state 84


State 49

  101 expr_wo_block: RETURN • expr

    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    WHILE          shift, and go to state 43
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    LPAREN         shift, and go to state 53
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 90
    expr_w_block      go to state 83
    expr_wo_block     go to state 84


State 50

  102 expr_wo_block: BREAK • expr

    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    WHILE          shift, and go to state 43
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    LPAREN         shift, and go to state 53
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 91
    expr_w_block      go to state 83
    expr_wo_block     go to state 84


State 51

  103 expr_wo_block: CONTINUE •

    $default  reduce using rule 103 (expr_wo_block)


State 52

   51 block_expr: LBRACE RBRACE •

    $default  reduce using rule 51 (block_expr)


State 53

   94 expr_wo_block: LPAREN • expr RPAREN
   99              | LPAREN • RPAREN
  104              | LPAREN • expr_list opt_comma RPAREN

    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    WHILE          shift, and go to state 43
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    LPAREN         shift, and go to state 53
    RPAREN         shift, and go to state 92
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 93
    expr_list         go to state 94
    expr_w_block      go to state 83
    expr_wo_block     go to state 84


State 54

   13 stmt: SEMICOLON •

    $default  reduce using rule 13 (stmt)


State 55

   55 unary_op_expr: AMPERSAND • expr

    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    WHILE          shift, and go to state 43
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    LPAREN         shift, and go to state 53
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 95
    expr_w_block      go to state 83
    expr_wo_block     go to state 84


State 56

   56 unary_op_expr: AMPERSAND_MUT • expr

    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    WHILE          shift, and go to state 43
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    LPAREN         shift, and go to state 53
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 96
    expr_w_block      go to state 83
    expr_wo_block     go to state 84


State 57

   17 stmt: item •

    $default  reduce using rule 17 (stmt)


State 58

   20 stmt_list: stmt •

    $default  reduce using rule 20 (stmt_list)


State 59

   18 stmt_list: stmt_list • stmt
   19          | stmt_list • error
   48 block_expr: LBRACE stmt_list • RBRACE
   49           | LBRACE stmt_list • expr RBRACE

    error          shift, and go to state 97
    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    LET            shift, and go to state 42
    FN             shift, and go to state 1
    WHILE          shift, and go to state 43
    PRINT_LN       shift, and go to state 44
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    RBRACE         shift, and go to state 98
    LPAREN         shift, and go to state 53
    SEMICOLON      shift, and go to state 54
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    item              go to state 57
    function_decl     go to state 5
    stmt              go to state 99
    print_ln          go to state 60
    let               go to state 61
    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 100
    expr_stmt         go to state 71
    expr_w_block      go to state 72
    expr_wo_block     go to state 73


State 60

   16 stmt: print_ln • SEMICOLON

    SEMICOLON  shift, and go to state 101


State 61

   14 stmt: let •

    $default  reduce using rule 14 (stmt)


State 62

   92 expr_w_block: if_expr •

    $default  reduce using rule 92 (expr_w_block)


State 63

   93 expr_w_block: block_expr •

    $default  reduce using rule 93 (expr_w_block)


State 64

   98 expr_wo_block: unary_op_expr •

    $default  reduce using rule 98 (expr_wo_block)


State 65

   95 expr_wo_block: bin_op_expr •

    $default  reduce using rule 95 (expr_wo_block)


State 66

  105 expr_wo_block: literal •

    $default  reduce using rule 105 (expr_wo_block)


State 67

  100 expr_wo_block: call_expr •

    $default  reduce using rule 100 (expr_wo_block)


State 68

   91 expr_w_block: while_expr •

    $default  reduce using rule 91 (expr_w_block)


State 69

   96 expr_wo_block: tuple_index_expr •

    $default  reduce using rule 96 (expr_wo_block)


State 70

   50 block_expr: LBRACE expr • RBRACE
   57 bin_op_expr: expr • PLUS expr
   58            | expr • MINUS expr
   59            | expr • STAR expr
   60            | expr • SLASH expr
   61            | expr • L_AND expr
   62            | expr • L_OR expr
   63            | expr • EQEQ expr
   64            | expr • NE expr
   65            | expr • LT expr
   66            | expr • GT expr
   67            | expr • GE expr
   68            | expr • LE expr
   69            | expr • EQ expr
   70            | expr • PLUS_EQ expr
   71            | expr • MIN_EQ expr
   72            | expr • DIV_EQ expr
   73            | expr • MUL_EQ expr
   84 tuple_index_expr: expr • DOT DEC_LITERAL

    EQ       shift, and go to state 102
    EQEQ     shift, and go to state 103
    NE       shift, and go to state 104
    LT       shift, and go to state 105
    LE       shift, and go to state 106
    GT       shift, and go to state 107
    GE       shift, and go to state 108
    PLUS     shift, and go to state 109
    MINUS    shift, and go to state 110
    STAR     shift, and go to state 111
    SLASH    shift, and go to state 112
    L_AND    shift, and go to state 113
    L_OR     shift, and go to state 114
    PLUS_EQ  shift, and go to state 115
    MIN_EQ   shift, and go to state 116
    MUL_EQ   shift, and go to state 117
    DIV_EQ   shift, and go to state 118
    RBRACE   shift, and go to state 119
    DOT      shift, and go to state 120


State 71

   15 stmt: expr_stmt • SEMICOLON

    SEMICOLON  shift, and go to state 121


State 72

   85 expr: expr_w_block •
   89 expr_stmt: expr_w_block •

    SEMICOLON  reduce using rule 89 (expr_stmt)
    $default   reduce using rule 85 (expr)


State 73

   86 expr: expr_wo_block •
   90 expr_stmt: expr_wo_block •

    SEMICOLON  reduce using rule 90 (expr_stmt)
    $default   reduce using rule 86 (expr)


State 74

   10 func_arg_list: func_arg_list COMMA func_arg •

    $default  reduce using rule 10 (func_arg_list)


State 75

   12 func_arg: opt_mut IDENTIFIER COLON • type

    I8      shift, and go to state 23
    I16     shift, and go to state 24
    I32     shift, and go to state 25
    I64     shift, and go to state 26
    ISIZE   shift, and go to state 27
    U8      shift, and go to state 28
    U16     shift, and go to state 29
    U32     shift, and go to state 30
    U64     shift, and go to state 31
    USIZE   shift, and go to state 32
    BOOL    shift, and go to state 33
    LPAREN  shift, and go to state 34

    type  go to state 122


State 76

   47 type: LPAREN RPAREN •

    $default  reduce using rule 47 (type)


State 77

   33 type_list: type_list • COMMA type
   46 type: LPAREN type_list • RPAREN

    COMMA   shift, and go to state 123
    RPAREN  shift, and go to state 124


State 78

   34 type_list: type •

    $default  reduce using rule 34 (type_list)


State 79

    5 function_decl: FN IDENTIFIER func_decl_args ARROW type block_expr •

    $default  reduce using rule 5 (function_decl)


State 80

   81 call_expr: IDENTIFIER LPAREN • call_expr_args RPAREN
   82          | IDENTIFIER LPAREN • RPAREN

    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    WHILE          shift, and go to state 43
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    LPAREN         shift, and go to state 53
    RPAREN         shift, and go to state 125
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr_args    go to state 126
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 127
    expr_w_block      go to state 83
    expr_wo_block     go to state 84


State 81

   28 let: LET opt_mut • ident type_decl EQ expr SEMICOLON
   29    | LET opt_mut • ident type_decl SEMICOLON

    IDENTIFIER  shift, and go to state 128

    ident  go to state 129


State 82

   57 bin_op_expr: expr • PLUS expr
   58            | expr • MINUS expr
   59            | expr • STAR expr
   60            | expr • SLASH expr
   61            | expr • L_AND expr
   62            | expr • L_OR expr
   63            | expr • EQEQ expr
   64            | expr • NE expr
   65            | expr • LT expr
   66            | expr • GT expr
   67            | expr • GE expr
   68            | expr • LE expr
   69            | expr • EQ expr
   70            | expr • PLUS_EQ expr
   71            | expr • MIN_EQ expr
   72            | expr • DIV_EQ expr
   73            | expr • MUL_EQ expr
   83 while_expr: WHILE expr • block_expr
   84 tuple_index_expr: expr • DOT DEC_LITERAL

    EQ       shift, and go to state 102
    EQEQ     shift, and go to state 103
    NE       shift, and go to state 104
    LT       shift, and go to state 105
    LE       shift, and go to state 106
    GT       shift, and go to state 107
    GE       shift, and go to state 108
    PLUS     shift, and go to state 109
    MINUS    shift, and go to state 110
    STAR     shift, and go to state 111
    SLASH    shift, and go to state 112
    L_AND    shift, and go to state 113
    L_OR     shift, and go to state 114
    PLUS_EQ  shift, and go to state 115
    MIN_EQ   shift, and go to state 116
    MUL_EQ   shift, and go to state 117
    DIV_EQ   shift, and go to state 118
    LBRACE   shift, and go to state 18
    DOT      shift, and go to state 120

    block_expr  go to state 130


State 83

   85 expr: expr_w_block •

    $default  reduce using rule 85 (expr)


State 84

   86 expr: expr_wo_block •

    $default  reduce using rule 86 (expr)


State 85

   21 print_ln: PRINT_LN LPAREN • STR_LITERAL RPAREN

    STR_LITERAL  shift, and go to state 131


State 86

   54 unary_op_expr: BANG expr •
   57 bin_op_expr: expr • PLUS expr
   58            | expr • MINUS expr
   59            | expr • STAR expr
   60            | expr • SLASH expr
   61            | expr • L_AND expr
   62            | expr • L_OR expr
   63            | expr • EQEQ expr
   64            | expr • NE expr
   65            | expr • LT expr
   66            | expr • GT expr
   67            | expr • GE expr
   68            | expr • LE expr
   69            | expr • EQ expr
   70            | expr • PLUS_EQ expr
   71            | expr • MIN_EQ expr
   72            | expr • DIV_EQ expr
   73            | expr • MUL_EQ expr
   84 tuple_index_expr: expr • DOT DEC_LITERAL

    DOT  shift, and go to state 120

    DOT       [reduce using rule 54 (unary_op_expr)]
    $default  reduce using rule 54 (unary_op_expr)

    shift/reduce conflict on token DOT:
       54 unary_op_expr: BANG expr •
       84 tuple_index_expr: expr • DOT DEC_LITERAL
      Example: BANG expr • DOT DEC_LITERAL
      Shift derivation
        expr_wo_block
        ↳ 98: unary_op_expr
              ↳ 54: BANG expr
                         ↳ 86: expr_wo_block
                               ↳ 96: tuple_index_expr
                                     ↳ 84: expr • DOT DEC_LITERAL
      Reduce derivation
        expr_wo_block
        ↳ 96: tuple_index_expr
              ↳ 84: expr                          DOT DEC_LITERAL
                    ↳ 86: expr_wo_block
                          ↳ 98: unary_op_expr
                                ↳ 54: BANG expr •



State 87

   52 unary_op_expr: MINUS expr •
   57 bin_op_expr: expr • PLUS expr
   58            | expr • MINUS expr
   59            | expr • STAR expr
   60            | expr • SLASH expr
   61            | expr • L_AND expr
   62            | expr • L_OR expr
   63            | expr • EQEQ expr
   64            | expr • NE expr
   65            | expr • LT expr
   66            | expr • GT expr
   67            | expr • GE expr
   68            | expr • LE expr
   69            | expr • EQ expr
   70            | expr • PLUS_EQ expr
   71            | expr • MIN_EQ expr
   72            | expr • DIV_EQ expr
   73            | expr • MUL_EQ expr
   84 tuple_index_expr: expr • DOT DEC_LITERAL

    DOT  shift, and go to state 120

    DOT       [reduce using rule 52 (unary_op_expr)]
    $default  reduce using rule 52 (unary_op_expr)

    shift/reduce conflict on token DOT:
       52 unary_op_expr: MINUS expr •
       84 tuple_index_expr: expr • DOT DEC_LITERAL
      Example: MINUS expr • DOT DEC_LITERAL
      Shift derivation
        expr_wo_block
        ↳ 98: unary_op_expr
              ↳ 52: MINUS expr
                          ↳ 86: expr_wo_block
                                ↳ 96: tuple_index_expr
                                      ↳ 84: expr • DOT DEC_LITERAL
      Reduce derivation
        expr_wo_block
        ↳ 96: tuple_index_expr
              ↳ 84: expr                           DOT DEC_LITERAL
                    ↳ 86: expr_wo_block
                          ↳ 98: unary_op_expr
                                ↳ 52: MINUS expr •



State 88

   53 unary_op_expr: STAR expr •
   57 bin_op_expr: expr • PLUS expr
   58            | expr • MINUS expr
   59            | expr • STAR expr
   60            | expr • SLASH expr
   61            | expr • L_AND expr
   62            | expr • L_OR expr
   63            | expr • EQEQ expr
   64            | expr • NE expr
   65            | expr • LT expr
   66            | expr • GT expr
   67            | expr • GE expr
   68            | expr • LE expr
   69            | expr • EQ expr
   70            | expr • PLUS_EQ expr
   71            | expr • MIN_EQ expr
   72            | expr • DIV_EQ expr
   73            | expr • MUL_EQ expr
   84 tuple_index_expr: expr • DOT DEC_LITERAL

    DOT  shift, and go to state 120

    DOT       [reduce using rule 53 (unary_op_expr)]
    $default  reduce using rule 53 (unary_op_expr)

    shift/reduce conflict on token DOT:
       53 unary_op_expr: STAR expr •
       84 tuple_index_expr: expr • DOT DEC_LITERAL
      Example: STAR expr • DOT DEC_LITERAL
      Shift derivation
        expr_wo_block
        ↳ 98: unary_op_expr
              ↳ 53: STAR expr
                         ↳ 86: expr_wo_block
                               ↳ 96: tuple_index_expr
                                     ↳ 84: expr • DOT DEC_LITERAL
      Reduce derivation
        expr_wo_block
        ↳ 96: tuple_index_expr
              ↳ 84: expr                          DOT DEC_LITERAL
                    ↳ 86: expr_wo_block
                          ↳ 98: unary_op_expr
                                ↳ 53: STAR expr •



State 89

   30 if_expr: IF expr • block_expr
   31        | IF expr • block_expr ELSE if_expr
   32        | IF expr • block_expr ELSE block_expr
   57 bin_op_expr: expr • PLUS expr
   58            | expr • MINUS expr
   59            | expr • STAR expr
   60            | expr • SLASH expr
   61            | expr • L_AND expr
   62            | expr • L_OR expr
   63            | expr • EQEQ expr
   64            | expr • NE expr
   65            | expr • LT expr
   66            | expr • GT expr
   67            | expr • GE expr
   68            | expr • LE expr
   69            | expr • EQ expr
   70            | expr • PLUS_EQ expr
   71            | expr • MIN_EQ expr
   72            | expr • DIV_EQ expr
   73            | expr • MUL_EQ expr
   84 tuple_index_expr: expr • DOT DEC_LITERAL

    EQ       shift, and go to state 102
    EQEQ     shift, and go to state 103
    NE       shift, and go to state 104
    LT       shift, and go to state 105
    LE       shift, and go to state 106
    GT       shift, and go to state 107
    GE       shift, and go to state 108
    PLUS     shift, and go to state 109
    MINUS    shift, and go to state 110
    STAR     shift, and go to state 111
    SLASH    shift, and go to state 112
    L_AND    shift, and go to state 113
    L_OR     shift, and go to state 114
    PLUS_EQ  shift, and go to state 115
    MIN_EQ   shift, and go to state 116
    MUL_EQ   shift, and go to state 117
    DIV_EQ   shift, and go to state 118
    LBRACE   shift, and go to state 18
    DOT      shift, and go to state 120

    block_expr  go to state 132


State 90

   57 bin_op_expr: expr • PLUS expr
   58            | expr • MINUS expr
   59            | expr • STAR expr
   60            | expr • SLASH expr
   61            | expr • L_AND expr
   62            | expr • L_OR expr
   63            | expr • EQEQ expr
   64            | expr • NE expr
   65            | expr • LT expr
   66            | expr • GT expr
   67            | expr • GE expr
   68            | expr • LE expr
   69            | expr • EQ expr
   70            | expr • PLUS_EQ expr
   71            | expr • MIN_EQ expr
   72            | expr • DIV_EQ expr
   73            | expr • MUL_EQ expr
   84 tuple_index_expr: expr • DOT DEC_LITERAL
  101 expr_wo_block: RETURN expr •

    EQ       shift, and go to state 102
    EQEQ     shift, and go to state 103
    NE       shift, and go to state 104
    LT       shift, and go to state 105
    LE       shift, and go to state 106
    GT       shift, and go to state 107
    GE       shift, and go to state 108
    PLUS     shift, and go to state 109
    MINUS    shift, and go to state 110
    STAR     shift, and go to state 111
    SLASH    shift, and go to state 112
    L_AND    shift, and go to state 113
    L_OR     shift, and go to state 114
    PLUS_EQ  shift, and go to state 115
    MIN_EQ   shift, and go to state 116
    MUL_EQ   shift, and go to state 117
    DIV_EQ   shift, and go to state 118
    DOT      shift, and go to state 120

    DOT       [reduce using rule 101 (expr_wo_block)]
    $default  reduce using rule 101 (expr_wo_block)

    shift/reduce conflict on token DOT:
      101 expr_wo_block: RETURN expr •
       84 tuple_index_expr: expr • DOT DEC_LITERAL
      Example: RETURN expr • DOT DEC_LITERAL
      Shift derivation
        expr_wo_block
        ↳ 101: RETURN expr
                      ↳ 86: expr_wo_block
                            ↳ 96: tuple_index_expr
                                  ↳ 84: expr • DOT DEC_LITERAL
      Reduce derivation
        expr_wo_block
        ↳ 96: tuple_index_expr
              ↳ 84: expr                       DOT DEC_LITERAL
                    ↳ 86: expr_wo_block
                          ↳ 101: RETURN expr •



State 91

   57 bin_op_expr: expr • PLUS expr
   58            | expr • MINUS expr
   59            | expr • STAR expr
   60            | expr • SLASH expr
   61            | expr • L_AND expr
   62            | expr • L_OR expr
   63            | expr • EQEQ expr
   64            | expr • NE expr
   65            | expr • LT expr
   66            | expr • GT expr
   67            | expr • GE expr
   68            | expr • LE expr
   69            | expr • EQ expr
   70            | expr • PLUS_EQ expr
   71            | expr • MIN_EQ expr
   72            | expr • DIV_EQ expr
   73            | expr • MUL_EQ expr
   84 tuple_index_expr: expr • DOT DEC_LITERAL
  102 expr_wo_block: BREAK expr •

    EQ       shift, and go to state 102
    EQEQ     shift, and go to state 103
    NE       shift, and go to state 104
    LT       shift, and go to state 105
    LE       shift, and go to state 106
    GT       shift, and go to state 107
    GE       shift, and go to state 108
    PLUS     shift, and go to state 109
    MINUS    shift, and go to state 110
    STAR     shift, and go to state 111
    SLASH    shift, and go to state 112
    L_AND    shift, and go to state 113
    L_OR     shift, and go to state 114
    PLUS_EQ  shift, and go to state 115
    MIN_EQ   shift, and go to state 116
    MUL_EQ   shift, and go to state 117
    DIV_EQ   shift, and go to state 118
    DOT      shift, and go to state 120

    DOT       [reduce using rule 102 (expr_wo_block)]
    $default  reduce using rule 102 (expr_wo_block)

    shift/reduce conflict on token DOT:
      102 expr_wo_block: BREAK expr •
       84 tuple_index_expr: expr • DOT DEC_LITERAL
      Example: BREAK expr • DOT DEC_LITERAL
      Shift derivation
        expr_wo_block
        ↳ 102: BREAK expr
                     ↳ 86: expr_wo_block
                           ↳ 96: tuple_index_expr
                                 ↳ 84: expr • DOT DEC_LITERAL
      Reduce derivation
        expr_wo_block
        ↳ 96: tuple_index_expr
              ↳ 84: expr                      DOT DEC_LITERAL
                    ↳ 86: expr_wo_block
                          ↳ 102: BREAK expr •



State 92

   99 expr_wo_block: LPAREN RPAREN •

    $default  reduce using rule 99 (expr_wo_block)


State 93

   57 bin_op_expr: expr • PLUS expr
   58            | expr • MINUS expr
   59            | expr • STAR expr
   60            | expr • SLASH expr
   61            | expr • L_AND expr
   62            | expr • L_OR expr
   63            | expr • EQEQ expr
   64            | expr • NE expr
   65            | expr • LT expr
   66            | expr • GT expr
   67            | expr • GE expr
   68            | expr • LE expr
   69            | expr • EQ expr
   70            | expr • PLUS_EQ expr
   71            | expr • MIN_EQ expr
   72            | expr • DIV_EQ expr
   73            | expr • MUL_EQ expr
   84 tuple_index_expr: expr • DOT DEC_LITERAL
   88 expr_list: expr •
   94 expr_wo_block: LPAREN expr • RPAREN

    EQ       shift, and go to state 102
    EQEQ     shift, and go to state 103
    NE       shift, and go to state 104
    LT       shift, and go to state 105
    LE       shift, and go to state 106
    GT       shift, and go to state 107
    GE       shift, and go to state 108
    PLUS     shift, and go to state 109
    MINUS    shift, and go to state 110
    STAR     shift, and go to state 111
    SLASH    shift, and go to state 112
    L_AND    shift, and go to state 113
    L_OR     shift, and go to state 114
    PLUS_EQ  shift, and go to state 115
    MIN_EQ   shift, and go to state 116
    MUL_EQ   shift, and go to state 117
    DIV_EQ   shift, and go to state 118
    RPAREN   shift, and go to state 133
    DOT      shift, and go to state 120

    RPAREN    [reduce using rule 88 (expr_list)]
    $default  reduce using rule 88 (expr_list)

    shift/reduce conflict on token RPAREN:
       88 expr_list: expr •
       94 expr_wo_block: LPAREN expr • RPAREN
      Example: LPAREN expr • RPAREN
      Shift derivation
        expr_wo_block
        ↳ 94: LPAREN expr • RPAREN
      Reduce derivation
        expr_wo_block
        ↳ 104: LPAREN expr_list    opt_comma RPAREN
                      ↳ 88: expr • ↳ 104: ε



State 94

   87 expr_list: expr_list • COMMA expr
  104 expr_wo_block: LPAREN expr_list • opt_comma RPAREN

    COMMA  shift, and go to state 134

    $default  reduce using rule 107 (opt_comma)

    opt_comma  go to state 135


State 95

   55 unary_op_expr: AMPERSAND expr •
   57 bin_op_expr: expr • PLUS expr
   58            | expr • MINUS expr
   59            | expr • STAR expr
   60            | expr • SLASH expr
   61            | expr • L_AND expr
   62            | expr • L_OR expr
   63            | expr • EQEQ expr
   64            | expr • NE expr
   65            | expr • LT expr
   66            | expr • GT expr
   67            | expr • GE expr
   68            | expr • LE expr
   69            | expr • EQ expr
   70            | expr • PLUS_EQ expr
   71            | expr • MIN_EQ expr
   72            | expr • DIV_EQ expr
   73            | expr • MUL_EQ expr
   84 tuple_index_expr: expr • DOT DEC_LITERAL

    DOT  shift, and go to state 120

    DOT       [reduce using rule 55 (unary_op_expr)]
    $default  reduce using rule 55 (unary_op_expr)

    shift/reduce conflict on token DOT:
       55 unary_op_expr: AMPERSAND expr •
       84 tuple_index_expr: expr • DOT DEC_LITERAL
      Example: AMPERSAND expr • DOT DEC_LITERAL
      Shift derivation
        expr_wo_block
        ↳ 98: unary_op_expr
              ↳ 55: AMPERSAND expr
                              ↳ 86: expr_wo_block
                                    ↳ 96: tuple_index_expr
                                          ↳ 84: expr • DOT DEC_LITERAL
      Reduce derivation
        expr_wo_block
        ↳ 96: tuple_index_expr
              ↳ 84: expr                               DOT DEC_LITERAL
                    ↳ 86: expr_wo_block
                          ↳ 98: unary_op_expr
                                ↳ 55: AMPERSAND expr •



State 96

   56 unary_op_expr: AMPERSAND_MUT expr •
   57 bin_op_expr: expr • PLUS expr
   58            | expr • MINUS expr
   59            | expr • STAR expr
   60            | expr • SLASH expr
   61            | expr • L_AND expr
   62            | expr • L_OR expr
   63            | expr • EQEQ expr
   64            | expr • NE expr
   65            | expr • LT expr
   66            | expr • GT expr
   67            | expr • GE expr
   68            | expr • LE expr
   69            | expr • EQ expr
   70            | expr • PLUS_EQ expr
   71            | expr • MIN_EQ expr
   72            | expr • DIV_EQ expr
   73            | expr • MUL_EQ expr
   84 tuple_index_expr: expr • DOT DEC_LITERAL

    DOT  shift, and go to state 120

    DOT       [reduce using rule 56 (unary_op_expr)]
    $default  reduce using rule 56 (unary_op_expr)

    shift/reduce conflict on token DOT:
       56 unary_op_expr: AMPERSAND_MUT expr •
       84 tuple_index_expr: expr • DOT DEC_LITERAL
      Example: AMPERSAND_MUT expr • DOT DEC_LITERAL
      Shift derivation
        expr_wo_block
        ↳ 98: unary_op_expr
              ↳ 56: AMPERSAND_MUT expr
                                  ↳ 86: expr_wo_block
                                        ↳ 96: tuple_index_expr
                                              ↳ 84: expr • DOT DEC_LITERAL
      Reduce derivation
        expr_wo_block
        ↳ 96: tuple_index_expr
              ↳ 84: expr                                   DOT DEC_LITERAL
                    ↳ 86: expr_wo_block
                          ↳ 98: unary_op_expr
                                ↳ 56: AMPERSAND_MUT expr •



State 97

   19 stmt_list: stmt_list error •

    $default  reduce using rule 19 (stmt_list)


State 98

   48 block_expr: LBRACE stmt_list RBRACE •

    $default  reduce using rule 48 (block_expr)


State 99

   18 stmt_list: stmt_list stmt •

    $default  reduce using rule 18 (stmt_list)


State 100

   49 block_expr: LBRACE stmt_list expr • RBRACE
   57 bin_op_expr: expr • PLUS expr
   58            | expr • MINUS expr
   59            | expr • STAR expr
   60            | expr • SLASH expr
   61            | expr • L_AND expr
   62            | expr • L_OR expr
   63            | expr • EQEQ expr
   64            | expr • NE expr
   65            | expr • LT expr
   66            | expr • GT expr
   67            | expr • GE expr
   68            | expr • LE expr
   69            | expr • EQ expr
   70            | expr • PLUS_EQ expr
   71            | expr • MIN_EQ expr
   72            | expr • DIV_EQ expr
   73            | expr • MUL_EQ expr
   84 tuple_index_expr: expr • DOT DEC_LITERAL

    EQ       shift, and go to state 102
    EQEQ     shift, and go to state 103
    NE       shift, and go to state 104
    LT       shift, and go to state 105
    LE       shift, and go to state 106
    GT       shift, and go to state 107
    GE       shift, and go to state 108
    PLUS     shift, and go to state 109
    MINUS    shift, and go to state 110
    STAR     shift, and go to state 111
    SLASH    shift, and go to state 112
    L_AND    shift, and go to state 113
    L_OR     shift, and go to state 114
    PLUS_EQ  shift, and go to state 115
    MIN_EQ   shift, and go to state 116
    MUL_EQ   shift, and go to state 117
    DIV_EQ   shift, and go to state 118
    RBRACE   shift, and go to state 136
    DOT      shift, and go to state 120


State 101

   16 stmt: print_ln SEMICOLON •

    $default  reduce using rule 16 (stmt)


State 102

   69 bin_op_expr: expr EQ • expr

    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    WHILE          shift, and go to state 43
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    LPAREN         shift, and go to state 53
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 137
    expr_w_block      go to state 83
    expr_wo_block     go to state 84


State 103

   63 bin_op_expr: expr EQEQ • expr

    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    WHILE          shift, and go to state 43
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    LPAREN         shift, and go to state 53
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 138
    expr_w_block      go to state 83
    expr_wo_block     go to state 84


State 104

   64 bin_op_expr: expr NE • expr

    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    WHILE          shift, and go to state 43
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    LPAREN         shift, and go to state 53
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 139
    expr_w_block      go to state 83
    expr_wo_block     go to state 84


State 105

   65 bin_op_expr: expr LT • expr

    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    WHILE          shift, and go to state 43
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    LPAREN         shift, and go to state 53
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 140
    expr_w_block      go to state 83
    expr_wo_block     go to state 84


State 106

   68 bin_op_expr: expr LE • expr

    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    WHILE          shift, and go to state 43
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    LPAREN         shift, and go to state 53
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 141
    expr_w_block      go to state 83
    expr_wo_block     go to state 84


State 107

   66 bin_op_expr: expr GT • expr

    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    WHILE          shift, and go to state 43
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    LPAREN         shift, and go to state 53
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 142
    expr_w_block      go to state 83
    expr_wo_block     go to state 84


State 108

   67 bin_op_expr: expr GE • expr

    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    WHILE          shift, and go to state 43
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    LPAREN         shift, and go to state 53
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 143
    expr_w_block      go to state 83
    expr_wo_block     go to state 84


State 109

   57 bin_op_expr: expr PLUS • expr

    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    WHILE          shift, and go to state 43
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    LPAREN         shift, and go to state 53
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 144
    expr_w_block      go to state 83
    expr_wo_block     go to state 84


State 110

   58 bin_op_expr: expr MINUS • expr

    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    WHILE          shift, and go to state 43
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    LPAREN         shift, and go to state 53
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 145
    expr_w_block      go to state 83
    expr_wo_block     go to state 84


State 111

   59 bin_op_expr: expr STAR • expr

    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    WHILE          shift, and go to state 43
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    LPAREN         shift, and go to state 53
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 146
    expr_w_block      go to state 83
    expr_wo_block     go to state 84


State 112

   60 bin_op_expr: expr SLASH • expr

    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    WHILE          shift, and go to state 43
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    LPAREN         shift, and go to state 53
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 147
    expr_w_block      go to state 83
    expr_wo_block     go to state 84


State 113

   61 bin_op_expr: expr L_AND • expr

    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    WHILE          shift, and go to state 43
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    LPAREN         shift, and go to state 53
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 148
    expr_w_block      go to state 83
    expr_wo_block     go to state 84


State 114

   62 bin_op_expr: expr L_OR • expr

    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    WHILE          shift, and go to state 43
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    LPAREN         shift, and go to state 53
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 149
    expr_w_block      go to state 83
    expr_wo_block     go to state 84


State 115

   70 bin_op_expr: expr PLUS_EQ • expr

    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    WHILE          shift, and go to state 43
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    LPAREN         shift, and go to state 53
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 150
    expr_w_block      go to state 83
    expr_wo_block     go to state 84


State 116

   71 bin_op_expr: expr MIN_EQ • expr

    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    WHILE          shift, and go to state 43
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    LPAREN         shift, and go to state 53
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 151
    expr_w_block      go to state 83
    expr_wo_block     go to state 84


State 117

   73 bin_op_expr: expr MUL_EQ • expr

    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    WHILE          shift, and go to state 43
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    LPAREN         shift, and go to state 53
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 152
    expr_w_block      go to state 83
    expr_wo_block     go to state 84


State 118

   72 bin_op_expr: expr DIV_EQ • expr

    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    WHILE          shift, and go to state 43
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    LPAREN         shift, and go to state 53
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 153
    expr_w_block      go to state 83
    expr_wo_block     go to state 84


State 119

   50 block_expr: LBRACE expr RBRACE •

    $default  reduce using rule 50 (block_expr)


State 120

   84 tuple_index_expr: expr DOT • DEC_LITERAL

    DEC_LITERAL  shift, and go to state 154


State 121

   15 stmt: expr_stmt SEMICOLON •

    $default  reduce using rule 15 (stmt)


State 122

   12 func_arg: opt_mut IDENTIFIER COLON type •

    $default  reduce using rule 12 (func_arg)


State 123

   33 type_list: type_list COMMA • type

    I8      shift, and go to state 23
    I16     shift, and go to state 24
    I32     shift, and go to state 25
    I64     shift, and go to state 26
    ISIZE   shift, and go to state 27
    U8      shift, and go to state 28
    U16     shift, and go to state 29
    U32     shift, and go to state 30
    U64     shift, and go to state 31
    USIZE   shift, and go to state 32
    BOOL    shift, and go to state 33
    LPAREN  shift, and go to state 34

    type  go to state 155


State 124

   46 type: LPAREN type_list RPAREN •

    $default  reduce using rule 46 (type)


State 125

   82 call_expr: IDENTIFIER LPAREN RPAREN •

    $default  reduce using rule 82 (call_expr)


State 126

   79 call_expr_args: call_expr_args • COMMA expr
   81 call_expr: IDENTIFIER LPAREN call_expr_args • RPAREN

    COMMA   shift, and go to state 156
    RPAREN  shift, and go to state 157


State 127

   57 bin_op_expr: expr • PLUS expr
   58            | expr • MINUS expr
   59            | expr • STAR expr
   60            | expr • SLASH expr
   61            | expr • L_AND expr
   62            | expr • L_OR expr
   63            | expr • EQEQ expr
   64            | expr • NE expr
   65            | expr • LT expr
   66            | expr • GT expr
   67            | expr • GE expr
   68            | expr • LE expr
   69            | expr • EQ expr
   70            | expr • PLUS_EQ expr
   71            | expr • MIN_EQ expr
   72            | expr • DIV_EQ expr
   73            | expr • MUL_EQ expr
   80 call_expr_args: expr •
   84 tuple_index_expr: expr • DOT DEC_LITERAL

    EQ       shift, and go to state 102
    EQEQ     shift, and go to state 103
    NE       shift, and go to state 104
    LT       shift, and go to state 105
    LE       shift, and go to state 106
    GT       shift, and go to state 107
    GE       shift, and go to state 108
    PLUS     shift, and go to state 109
    MINUS    shift, and go to state 110
    STAR     shift, and go to state 111
    SLASH    shift, and go to state 112
    L_AND    shift, and go to state 113
    L_OR     shift, and go to state 114
    PLUS_EQ  shift, and go to state 115
    MIN_EQ   shift, and go to state 116
    MUL_EQ   shift, and go to state 117
    DIV_EQ   shift, and go to state 118
    DOT      shift, and go to state 120

    $default  reduce using rule 80 (call_expr_args)


State 128

   27 ident: IDENTIFIER •

    $default  reduce using rule 27 (ident)


State 129

   28 let: LET opt_mut ident • type_decl EQ expr SEMICOLON
   29    | LET opt_mut ident • type_decl SEMICOLON

    COLON  shift, and go to state 158

    $default  reduce using rule 24 (type_decl)

    type_decl  go to state 159


State 130

   83 while_expr: WHILE expr block_expr •

    $default  reduce using rule 83 (while_expr)


State 131

   21 print_ln: PRINT_LN LPAREN STR_LITERAL • RPAREN

    RPAREN  shift, and go to state 160


State 132

   30 if_expr: IF expr block_expr •
   31        | IF expr block_expr • ELSE if_expr
   32        | IF expr block_expr • ELSE block_expr

    ELSE  shift, and go to state 161

    $default  reduce using rule 30 (if_expr)


State 133

   94 expr_wo_block: LPAREN expr RPAREN •

    $default  reduce using rule 94 (expr_wo_block)


State 134

   87 expr_list: expr_list COMMA • expr
  106 opt_comma: COMMA •

    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    WHILE          shift, and go to state 43
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    LPAREN         shift, and go to state 53
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    $default  reduce using rule 106 (opt_comma)

    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 162
    expr_w_block      go to state 83
    expr_wo_block     go to state 84


State 135

  104 expr_wo_block: LPAREN expr_list opt_comma • RPAREN

    RPAREN  shift, and go to state 163


State 136

   49 block_expr: LBRACE stmt_list expr RBRACE •

    $default  reduce using rule 49 (block_expr)


State 137

   57 bin_op_expr: expr • PLUS expr
   58            | expr • MINUS expr
   59            | expr • STAR expr
   60            | expr • SLASH expr
   61            | expr • L_AND expr
   62            | expr • L_OR expr
   63            | expr • EQEQ expr
   64            | expr • NE expr
   65            | expr • LT expr
   66            | expr • GT expr
   67            | expr • GE expr
   68            | expr • LE expr
   69            | expr • EQ expr
   69            | expr EQ expr •
   70            | expr • PLUS_EQ expr
   71            | expr • MIN_EQ expr
   72            | expr • DIV_EQ expr
   73            | expr • MUL_EQ expr
   84 tuple_index_expr: expr • DOT DEC_LITERAL

    EQ       shift, and go to state 102
    EQEQ     shift, and go to state 103
    NE       shift, and go to state 104
    LT       shift, and go to state 105
    LE       shift, and go to state 106
    GT       shift, and go to state 107
    GE       shift, and go to state 108
    PLUS     shift, and go to state 109
    MINUS    shift, and go to state 110
    STAR     shift, and go to state 111
    SLASH    shift, and go to state 112
    L_AND    shift, and go to state 113
    L_OR     shift, and go to state 114
    PLUS_EQ  shift, and go to state 115
    MIN_EQ   shift, and go to state 116
    MUL_EQ   shift, and go to state 117
    DIV_EQ   shift, and go to state 118
    DOT      shift, and go to state 120

    DOT       [reduce using rule 69 (bin_op_expr)]
    $default  reduce using rule 69 (bin_op_expr)

    shift/reduce conflict on token DOT:
       69 bin_op_expr: expr EQ expr •
       84 tuple_index_expr: expr • DOT DEC_LITERAL
      Example: expr EQ expr • DOT DEC_LITERAL
      Shift derivation
        expr_wo_block
        ↳ 95: bin_op_expr
              ↳ 69: expr EQ expr
                            ↳ 86: expr_wo_block
                                  ↳ 96: tuple_index_expr
                                        ↳ 84: expr • DOT DEC_LITERAL
      Reduce derivation
        expr_wo_block
        ↳ 96: tuple_index_expr
              ↳ 84: expr                             DOT DEC_LITERAL
                    ↳ 86: expr_wo_block
                          ↳ 95: bin_op_expr
                                ↳ 69: expr EQ expr •



State 138

   57 bin_op_expr: expr • PLUS expr
   58            | expr • MINUS expr
   59            | expr • STAR expr
   60            | expr • SLASH expr
   61            | expr • L_AND expr
   62            | expr • L_OR expr
   63            | expr • EQEQ expr
   63            | expr EQEQ expr •
   64            | expr • NE expr
   65            | expr • LT expr
   66            | expr • GT expr
   67            | expr • GE expr
   68            | expr • LE expr
   69            | expr • EQ expr
   70            | expr • PLUS_EQ expr
   71            | expr • MIN_EQ expr
   72            | expr • DIV_EQ expr
   73            | expr • MUL_EQ expr
   84 tuple_index_expr: expr • DOT DEC_LITERAL

    PLUS   shift, and go to state 109
    MINUS  shift, and go to state 110
    STAR   shift, and go to state 111
    SLASH  shift, and go to state 112
    DOT    shift, and go to state 120

    DOT       [reduce using rule 63 (bin_op_expr)]
    $default  reduce using rule 63 (bin_op_expr)

    shift/reduce conflict on token DOT:
       63 bin_op_expr: expr EQEQ expr •
       84 tuple_index_expr: expr • DOT DEC_LITERAL
      Example: expr EQEQ expr • DOT DEC_LITERAL
      Shift derivation
        expr_wo_block
        ↳ 95: bin_op_expr
              ↳ 63: expr EQEQ expr
                              ↳ 86: expr_wo_block
                                    ↳ 96: tuple_index_expr
                                          ↳ 84: expr • DOT DEC_LITERAL
      Reduce derivation
        expr_wo_block
        ↳ 96: tuple_index_expr
              ↳ 84: expr                               DOT DEC_LITERAL
                    ↳ 86: expr_wo_block
                          ↳ 95: bin_op_expr
                                ↳ 63: expr EQEQ expr •



State 139

   57 bin_op_expr: expr • PLUS expr
   58            | expr • MINUS expr
   59            | expr • STAR expr
   60            | expr • SLASH expr
   61            | expr • L_AND expr
   62            | expr • L_OR expr
   63            | expr • EQEQ expr
   64            | expr • NE expr
   64            | expr NE expr •
   65            | expr • LT expr
   66            | expr • GT expr
   67            | expr • GE expr
   68            | expr • LE expr
   69            | expr • EQ expr
   70            | expr • PLUS_EQ expr
   71            | expr • MIN_EQ expr
   72            | expr • DIV_EQ expr
   73            | expr • MUL_EQ expr
   84 tuple_index_expr: expr • DOT DEC_LITERAL

    PLUS   shift, and go to state 109
    MINUS  shift, and go to state 110
    STAR   shift, and go to state 111
    SLASH  shift, and go to state 112
    DOT    shift, and go to state 120

    DOT       [reduce using rule 64 (bin_op_expr)]
    $default  reduce using rule 64 (bin_op_expr)

    shift/reduce conflict on token DOT:
       64 bin_op_expr: expr NE expr •
       84 tuple_index_expr: expr • DOT DEC_LITERAL
      Example: expr NE expr • DOT DEC_LITERAL
      Shift derivation
        expr_wo_block
        ↳ 95: bin_op_expr
              ↳ 64: expr NE expr
                            ↳ 86: expr_wo_block
                                  ↳ 96: tuple_index_expr
                                        ↳ 84: expr • DOT DEC_LITERAL
      Reduce derivation
        expr_wo_block
        ↳ 96: tuple_index_expr
              ↳ 84: expr                             DOT DEC_LITERAL
                    ↳ 86: expr_wo_block
                          ↳ 95: bin_op_expr
                                ↳ 64: expr NE expr •



State 140

   57 bin_op_expr: expr • PLUS expr
   58            | expr • MINUS expr
   59            | expr • STAR expr
   60            | expr • SLASH expr
   61            | expr • L_AND expr
   62            | expr • L_OR expr
   63            | expr • EQEQ expr
   64            | expr • NE expr
   65            | expr • LT expr
   65            | expr LT expr •
   66            | expr • GT expr
   67            | expr • GE expr
   68            | expr • LE expr
   69            | expr • EQ expr
   70            | expr • PLUS_EQ expr
   71            | expr • MIN_EQ expr
   72            | expr • DIV_EQ expr
   73            | expr • MUL_EQ expr
   84 tuple_index_expr: expr • DOT DEC_LITERAL

    PLUS   shift, and go to state 109
    MINUS  shift, and go to state 110
    STAR   shift, and go to state 111
    SLASH  shift, and go to state 112
    DOT    shift, and go to state 120

    DOT       [reduce using rule 65 (bin_op_expr)]
    $default  reduce using rule 65 (bin_op_expr)

    shift/reduce conflict on token DOT:
       65 bin_op_expr: expr LT expr •
       84 tuple_index_expr: expr • DOT DEC_LITERAL
      Example: expr LT expr • DOT DEC_LITERAL
      Shift derivation
        expr_wo_block
        ↳ 95: bin_op_expr
              ↳ 65: expr LT expr
                            ↳ 86: expr_wo_block
                                  ↳ 96: tuple_index_expr
                                        ↳ 84: expr • DOT DEC_LITERAL
      Reduce derivation
        expr_wo_block
        ↳ 96: tuple_index_expr
              ↳ 84: expr                             DOT DEC_LITERAL
                    ↳ 86: expr_wo_block
                          ↳ 95: bin_op_expr
                                ↳ 65: expr LT expr •



State 141

   57 bin_op_expr: expr • PLUS expr
   58            | expr • MINUS expr
   59            | expr • STAR expr
   60            | expr • SLASH expr
   61            | expr • L_AND expr
   62            | expr • L_OR expr
   63            | expr • EQEQ expr
   64            | expr • NE expr
   65            | expr • LT expr
   66            | expr • GT expr
   67            | expr • GE expr
   68            | expr • LE expr
   68            | expr LE expr •
   69            | expr • EQ expr
   70            | expr • PLUS_EQ expr
   71            | expr • MIN_EQ expr
   72            | expr • DIV_EQ expr
   73            | expr • MUL_EQ expr
   84 tuple_index_expr: expr • DOT DEC_LITERAL

    PLUS   shift, and go to state 109
    MINUS  shift, and go to state 110
    STAR   shift, and go to state 111
    SLASH  shift, and go to state 112
    DOT    shift, and go to state 120

    DOT       [reduce using rule 68 (bin_op_expr)]
    $default  reduce using rule 68 (bin_op_expr)

    shift/reduce conflict on token DOT:
       68 bin_op_expr: expr LE expr •
       84 tuple_index_expr: expr • DOT DEC_LITERAL
      Example: expr LE expr • DOT DEC_LITERAL
      Shift derivation
        expr_wo_block
        ↳ 95: bin_op_expr
              ↳ 68: expr LE expr
                            ↳ 86: expr_wo_block
                                  ↳ 96: tuple_index_expr
                                        ↳ 84: expr • DOT DEC_LITERAL
      Reduce derivation
        expr_wo_block
        ↳ 96: tuple_index_expr
              ↳ 84: expr                             DOT DEC_LITERAL
                    ↳ 86: expr_wo_block
                          ↳ 95: bin_op_expr
                                ↳ 68: expr LE expr •



State 142

   57 bin_op_expr: expr • PLUS expr
   58            | expr • MINUS expr
   59            | expr • STAR expr
   60            | expr • SLASH expr
   61            | expr • L_AND expr
   62            | expr • L_OR expr
   63            | expr • EQEQ expr
   64            | expr • NE expr
   65            | expr • LT expr
   66            | expr • GT expr
   66            | expr GT expr •
   67            | expr • GE expr
   68            | expr • LE expr
   69            | expr • EQ expr
   70            | expr • PLUS_EQ expr
   71            | expr • MIN_EQ expr
   72            | expr • DIV_EQ expr
   73            | expr • MUL_EQ expr
   84 tuple_index_expr: expr • DOT DEC_LITERAL

    PLUS   shift, and go to state 109
    MINUS  shift, and go to state 110
    STAR   shift, and go to state 111
    SLASH  shift, and go to state 112
    DOT    shift, and go to state 120

    DOT       [reduce using rule 66 (bin_op_expr)]
    $default  reduce using rule 66 (bin_op_expr)

    shift/reduce conflict on token DOT:
       66 bin_op_expr: expr GT expr •
       84 tuple_index_expr: expr • DOT DEC_LITERAL
      Example: expr GT expr • DOT DEC_LITERAL
      Shift derivation
        expr_wo_block
        ↳ 95: bin_op_expr
              ↳ 66: expr GT expr
                            ↳ 86: expr_wo_block
                                  ↳ 96: tuple_index_expr
                                        ↳ 84: expr • DOT DEC_LITERAL
      Reduce derivation
        expr_wo_block
        ↳ 96: tuple_index_expr
              ↳ 84: expr                             DOT DEC_LITERAL
                    ↳ 86: expr_wo_block
                          ↳ 95: bin_op_expr
                                ↳ 66: expr GT expr •



State 143

   57 bin_op_expr: expr • PLUS expr
   58            | expr • MINUS expr
   59            | expr • STAR expr
   60            | expr • SLASH expr
   61            | expr • L_AND expr
   62            | expr • L_OR expr
   63            | expr • EQEQ expr
   64            | expr • NE expr
   65            | expr • LT expr
   66            | expr • GT expr
   67            | expr • GE expr
   67            | expr GE expr •
   68            | expr • LE expr
   69            | expr • EQ expr
   70            | expr • PLUS_EQ expr
   71            | expr • MIN_EQ expr
   72            | expr • DIV_EQ expr
   73            | expr • MUL_EQ expr
   84 tuple_index_expr: expr • DOT DEC_LITERAL

    PLUS   shift, and go to state 109
    MINUS  shift, and go to state 110
    STAR   shift, and go to state 111
    SLASH  shift, and go to state 112
    DOT    shift, and go to state 120

    DOT       [reduce using rule 67 (bin_op_expr)]
    $default  reduce using rule 67 (bin_op_expr)

    shift/reduce conflict on token DOT:
       67 bin_op_expr: expr GE expr •
       84 tuple_index_expr: expr • DOT DEC_LITERAL
      Example: expr GE expr • DOT DEC_LITERAL
      Shift derivation
        expr_wo_block
        ↳ 95: bin_op_expr
              ↳ 67: expr GE expr
                            ↳ 86: expr_wo_block
                                  ↳ 96: tuple_index_expr
                                        ↳ 84: expr • DOT DEC_LITERAL
      Reduce derivation
        expr_wo_block
        ↳ 96: tuple_index_expr
              ↳ 84: expr                             DOT DEC_LITERAL
                    ↳ 86: expr_wo_block
                          ↳ 95: bin_op_expr
                                ↳ 67: expr GE expr •



State 144

   57 bin_op_expr: expr • PLUS expr
   57            | expr PLUS expr •
   58            | expr • MINUS expr
   59            | expr • STAR expr
   60            | expr • SLASH expr
   61            | expr • L_AND expr
   62            | expr • L_OR expr
   63            | expr • EQEQ expr
   64            | expr • NE expr
   65            | expr • LT expr
   66            | expr • GT expr
   67            | expr • GE expr
   68            | expr • LE expr
   69            | expr • EQ expr
   70            | expr • PLUS_EQ expr
   71            | expr • MIN_EQ expr
   72            | expr • DIV_EQ expr
   73            | expr • MUL_EQ expr
   84 tuple_index_expr: expr • DOT DEC_LITERAL

    STAR   shift, and go to state 111
    SLASH  shift, and go to state 112
    DOT    shift, and go to state 120

    DOT       [reduce using rule 57 (bin_op_expr)]
    $default  reduce using rule 57 (bin_op_expr)

    shift/reduce conflict on token DOT:
       57 bin_op_expr: expr PLUS expr •
       84 tuple_index_expr: expr • DOT DEC_LITERAL
      Example: expr PLUS expr • DOT DEC_LITERAL
      Shift derivation
        expr_wo_block
        ↳ 95: bin_op_expr
              ↳ 57: expr PLUS expr
                              ↳ 86: expr_wo_block
                                    ↳ 96: tuple_index_expr
                                          ↳ 84: expr • DOT DEC_LITERAL
      Reduce derivation
        expr_wo_block
        ↳ 96: tuple_index_expr
              ↳ 84: expr                               DOT DEC_LITERAL
                    ↳ 86: expr_wo_block
                          ↳ 95: bin_op_expr
                                ↳ 57: expr PLUS expr •



State 145

   57 bin_op_expr: expr • PLUS expr
   58            | expr • MINUS expr
   58            | expr MINUS expr •
   59            | expr • STAR expr
   60            | expr • SLASH expr
   61            | expr • L_AND expr
   62            | expr • L_OR expr
   63            | expr • EQEQ expr
   64            | expr • NE expr
   65            | expr • LT expr
   66            | expr • GT expr
   67            | expr • GE expr
   68            | expr • LE expr
   69            | expr • EQ expr
   70            | expr • PLUS_EQ expr
   71            | expr • MIN_EQ expr
   72            | expr • DIV_EQ expr
   73            | expr • MUL_EQ expr
   84 tuple_index_expr: expr • DOT DEC_LITERAL

    STAR   shift, and go to state 111
    SLASH  shift, and go to state 112
    DOT    shift, and go to state 120

    DOT       [reduce using rule 58 (bin_op_expr)]
    $default  reduce using rule 58 (bin_op_expr)

    shift/reduce conflict on token DOT:
       58 bin_op_expr: expr MINUS expr •
       84 tuple_index_expr: expr • DOT DEC_LITERAL
      Example: expr MINUS expr • DOT DEC_LITERAL
      Shift derivation
        expr_wo_block
        ↳ 95: bin_op_expr
              ↳ 58: expr MINUS expr
                               ↳ 86: expr_wo_block
                                     ↳ 96: tuple_index_expr
                                           ↳ 84: expr • DOT DEC_LITERAL
      Reduce derivation
        expr_wo_block
        ↳ 96: tuple_index_expr
              ↳ 84: expr                                DOT DEC_LITERAL
                    ↳ 86: expr_wo_block
                          ↳ 95: bin_op_expr
                                ↳ 58: expr MINUS expr •



State 146

   57 bin_op_expr: expr • PLUS expr
   58            | expr • MINUS expr
   59            | expr • STAR expr
   59            | expr STAR expr •
   60            | expr • SLASH expr
   61            | expr • L_AND expr
   62            | expr • L_OR expr
   63            | expr • EQEQ expr
   64            | expr • NE expr
   65            | expr • LT expr
   66            | expr • GT expr
   67            | expr • GE expr
   68            | expr • LE expr
   69            | expr • EQ expr
   70            | expr • PLUS_EQ expr
   71            | expr • MIN_EQ expr
   72            | expr • DIV_EQ expr
   73            | expr • MUL_EQ expr
   84 tuple_index_expr: expr • DOT DEC_LITERAL

    DOT  shift, and go to state 120

    DOT       [reduce using rule 59 (bin_op_expr)]
    $default  reduce using rule 59 (bin_op_expr)

    shift/reduce conflict on token DOT:
       59 bin_op_expr: expr STAR expr •
       84 tuple_index_expr: expr • DOT DEC_LITERAL
      Example: expr STAR expr • DOT DEC_LITERAL
      Shift derivation
        expr_wo_block
        ↳ 95: bin_op_expr
              ↳ 59: expr STAR expr
                              ↳ 86: expr_wo_block
                                    ↳ 96: tuple_index_expr
                                          ↳ 84: expr • DOT DEC_LITERAL
      Reduce derivation
        expr_wo_block
        ↳ 96: tuple_index_expr
              ↳ 84: expr                               DOT DEC_LITERAL
                    ↳ 86: expr_wo_block
                          ↳ 95: bin_op_expr
                                ↳ 59: expr STAR expr •



State 147

   57 bin_op_expr: expr • PLUS expr
   58            | expr • MINUS expr
   59            | expr • STAR expr
   60            | expr • SLASH expr
   60            | expr SLASH expr •
   61            | expr • L_AND expr
   62            | expr • L_OR expr
   63            | expr • EQEQ expr
   64            | expr • NE expr
   65            | expr • LT expr
   66            | expr • GT expr
   67            | expr • GE expr
   68            | expr • LE expr
   69            | expr • EQ expr
   70            | expr • PLUS_EQ expr
   71            | expr • MIN_EQ expr
   72            | expr • DIV_EQ expr
   73            | expr • MUL_EQ expr
   84 tuple_index_expr: expr • DOT DEC_LITERAL

    DOT  shift, and go to state 120

    DOT       [reduce using rule 60 (bin_op_expr)]
    $default  reduce using rule 60 (bin_op_expr)

    shift/reduce conflict on token DOT:
       60 bin_op_expr: expr SLASH expr •
       84 tuple_index_expr: expr • DOT DEC_LITERAL
      Example: expr SLASH expr • DOT DEC_LITERAL
      Shift derivation
        expr_wo_block
        ↳ 95: bin_op_expr
              ↳ 60: expr SLASH expr
                               ↳ 86: expr_wo_block
                                     ↳ 96: tuple_index_expr
                                           ↳ 84: expr • DOT DEC_LITERAL
      Reduce derivation
        expr_wo_block
        ↳ 96: tuple_index_expr
              ↳ 84: expr                                DOT DEC_LITERAL
                    ↳ 86: expr_wo_block
                          ↳ 95: bin_op_expr
                                ↳ 60: expr SLASH expr •



State 148

   57 bin_op_expr: expr • PLUS expr
   58            | expr • MINUS expr
   59            | expr • STAR expr
   60            | expr • SLASH expr
   61            | expr • L_AND expr
   61            | expr L_AND expr •
   62            | expr • L_OR expr
   63            | expr • EQEQ expr
   64            | expr • NE expr
   65            | expr • LT expr
   66            | expr • GT expr
   67            | expr • GE expr
   68            | expr • LE expr
   69            | expr • EQ expr
   70            | expr • PLUS_EQ expr
   71            | expr • MIN_EQ expr
   72            | expr • DIV_EQ expr
   73            | expr • MUL_EQ expr
   84 tuple_index_expr: expr • DOT DEC_LITERAL

    EQEQ   shift, and go to state 103
    NE     shift, and go to state 104
    LT     shift, and go to state 105
    LE     shift, and go to state 106
    GT     shift, and go to state 107
    GE     shift, and go to state 108
    PLUS   shift, and go to state 109
    MINUS  shift, and go to state 110
    STAR   shift, and go to state 111
    SLASH  shift, and go to state 112
    DOT    shift, and go to state 120

    DOT       [reduce using rule 61 (bin_op_expr)]
    $default  reduce using rule 61 (bin_op_expr)

    shift/reduce conflict on token DOT:
       61 bin_op_expr: expr L_AND expr •
       84 tuple_index_expr: expr • DOT DEC_LITERAL
      Example: expr L_AND expr • DOT DEC_LITERAL
      Shift derivation
        expr_wo_block
        ↳ 95: bin_op_expr
              ↳ 61: expr L_AND expr
                               ↳ 86: expr_wo_block
                                     ↳ 96: tuple_index_expr
                                           ↳ 84: expr • DOT DEC_LITERAL
      Reduce derivation
        expr_wo_block
        ↳ 96: tuple_index_expr
              ↳ 84: expr                                DOT DEC_LITERAL
                    ↳ 86: expr_wo_block
                          ↳ 95: bin_op_expr
                                ↳ 61: expr L_AND expr •



State 149

   57 bin_op_expr: expr • PLUS expr
   58            | expr • MINUS expr
   59            | expr • STAR expr
   60            | expr • SLASH expr
   61            | expr • L_AND expr
   62            | expr • L_OR expr
   62            | expr L_OR expr •
   63            | expr • EQEQ expr
   64            | expr • NE expr
   65            | expr • LT expr
   66            | expr • GT expr
   67            | expr • GE expr
   68            | expr • LE expr
   69            | expr • EQ expr
   70            | expr • PLUS_EQ expr
   71            | expr • MIN_EQ expr
   72            | expr • DIV_EQ expr
   73            | expr • MUL_EQ expr
   84 tuple_index_expr: expr • DOT DEC_LITERAL

    EQEQ   shift, and go to state 103
    NE     shift, and go to state 104
    LT     shift, and go to state 105
    LE     shift, and go to state 106
    GT     shift, and go to state 107
    GE     shift, and go to state 108
    PLUS   shift, and go to state 109
    MINUS  shift, and go to state 110
    STAR   shift, and go to state 111
    SLASH  shift, and go to state 112
    L_AND  shift, and go to state 113
    DOT    shift, and go to state 120

    DOT       [reduce using rule 62 (bin_op_expr)]
    $default  reduce using rule 62 (bin_op_expr)

    shift/reduce conflict on token DOT:
       62 bin_op_expr: expr L_OR expr •
       84 tuple_index_expr: expr • DOT DEC_LITERAL
      Example: expr L_OR expr • DOT DEC_LITERAL
      Shift derivation
        expr_wo_block
        ↳ 95: bin_op_expr
              ↳ 62: expr L_OR expr
                              ↳ 86: expr_wo_block
                                    ↳ 96: tuple_index_expr
                                          ↳ 84: expr • DOT DEC_LITERAL
      Reduce derivation
        expr_wo_block
        ↳ 96: tuple_index_expr
              ↳ 84: expr                               DOT DEC_LITERAL
                    ↳ 86: expr_wo_block
                          ↳ 95: bin_op_expr
                                ↳ 62: expr L_OR expr •



State 150

   57 bin_op_expr: expr • PLUS expr
   58            | expr • MINUS expr
   59            | expr • STAR expr
   60            | expr • SLASH expr
   61            | expr • L_AND expr
   62            | expr • L_OR expr
   63            | expr • EQEQ expr
   64            | expr • NE expr
   65            | expr • LT expr
   66            | expr • GT expr
   67            | expr • GE expr
   68            | expr • LE expr
   69            | expr • EQ expr
   70            | expr • PLUS_EQ expr
   70            | expr PLUS_EQ expr •
   71            | expr • MIN_EQ expr
   72            | expr • DIV_EQ expr
   73            | expr • MUL_EQ expr
   84 tuple_index_expr: expr • DOT DEC_LITERAL

    EQ       shift, and go to state 102
    EQEQ     shift, and go to state 103
    NE       shift, and go to state 104
    LT       shift, and go to state 105
    LE       shift, and go to state 106
    GT       shift, and go to state 107
    GE       shift, and go to state 108
    PLUS     shift, and go to state 109
    MINUS    shift, and go to state 110
    STAR     shift, and go to state 111
    SLASH    shift, and go to state 112
    L_AND    shift, and go to state 113
    L_OR     shift, and go to state 114
    PLUS_EQ  shift, and go to state 115
    MIN_EQ   shift, and go to state 116
    MUL_EQ   shift, and go to state 117
    DIV_EQ   shift, and go to state 118
    DOT      shift, and go to state 120

    DOT       [reduce using rule 70 (bin_op_expr)]
    $default  reduce using rule 70 (bin_op_expr)

    shift/reduce conflict on token DOT:
       70 bin_op_expr: expr PLUS_EQ expr •
       84 tuple_index_expr: expr • DOT DEC_LITERAL
      Example: expr PLUS_EQ expr • DOT DEC_LITERAL
      Shift derivation
        expr_wo_block
        ↳ 95: bin_op_expr
              ↳ 70: expr PLUS_EQ expr
                                 ↳ 86: expr_wo_block
                                       ↳ 96: tuple_index_expr
                                             ↳ 84: expr • DOT DEC_LITERAL
      Reduce derivation
        expr_wo_block
        ↳ 96: tuple_index_expr
              ↳ 84: expr                                  DOT DEC_LITERAL
                    ↳ 86: expr_wo_block
                          ↳ 95: bin_op_expr
                                ↳ 70: expr PLUS_EQ expr •



State 151

   57 bin_op_expr: expr • PLUS expr
   58            | expr • MINUS expr
   59            | expr • STAR expr
   60            | expr • SLASH expr
   61            | expr • L_AND expr
   62            | expr • L_OR expr
   63            | expr • EQEQ expr
   64            | expr • NE expr
   65            | expr • LT expr
   66            | expr • GT expr
   67            | expr • GE expr
   68            | expr • LE expr
   69            | expr • EQ expr
   70            | expr • PLUS_EQ expr
   71            | expr • MIN_EQ expr
   71            | expr MIN_EQ expr •
   72            | expr • DIV_EQ expr
   73            | expr • MUL_EQ expr
   84 tuple_index_expr: expr • DOT DEC_LITERAL

    EQ       shift, and go to state 102
    EQEQ     shift, and go to state 103
    NE       shift, and go to state 104
    LT       shift, and go to state 105
    LE       shift, and go to state 106
    GT       shift, and go to state 107
    GE       shift, and go to state 108
    PLUS     shift, and go to state 109
    MINUS    shift, and go to state 110
    STAR     shift, and go to state 111
    SLASH    shift, and go to state 112
    L_AND    shift, and go to state 113
    L_OR     shift, and go to state 114
    PLUS_EQ  shift, and go to state 115
    MIN_EQ   shift, and go to state 116
    MUL_EQ   shift, and go to state 117
    DIV_EQ   shift, and go to state 118
    DOT      shift, and go to state 120

    DOT       [reduce using rule 71 (bin_op_expr)]
    $default  reduce using rule 71 (bin_op_expr)

    shift/reduce conflict on token DOT:
       71 bin_op_expr: expr MIN_EQ expr •
       84 tuple_index_expr: expr • DOT DEC_LITERAL
      Example: expr MIN_EQ expr • DOT DEC_LITERAL
      Shift derivation
        expr_wo_block
        ↳ 95: bin_op_expr
              ↳ 71: expr MIN_EQ expr
                                ↳ 86: expr_wo_block
                                      ↳ 96: tuple_index_expr
                                            ↳ 84: expr • DOT DEC_LITERAL
      Reduce derivation
        expr_wo_block
        ↳ 96: tuple_index_expr
              ↳ 84: expr                                 DOT DEC_LITERAL
                    ↳ 86: expr_wo_block
                          ↳ 95: bin_op_expr
                                ↳ 71: expr MIN_EQ expr •



State 152

   57 bin_op_expr: expr • PLUS expr
   58            | expr • MINUS expr
   59            | expr • STAR expr
   60            | expr • SLASH expr
   61            | expr • L_AND expr
   62            | expr • L_OR expr
   63            | expr • EQEQ expr
   64            | expr • NE expr
   65            | expr • LT expr
   66            | expr • GT expr
   67            | expr • GE expr
   68            | expr • LE expr
   69            | expr • EQ expr
   70            | expr • PLUS_EQ expr
   71            | expr • MIN_EQ expr
   72            | expr • DIV_EQ expr
   73            | expr • MUL_EQ expr
   73            | expr MUL_EQ expr •
   84 tuple_index_expr: expr • DOT DEC_LITERAL

    EQ       shift, and go to state 102
    EQEQ     shift, and go to state 103
    NE       shift, and go to state 104
    LT       shift, and go to state 105
    LE       shift, and go to state 106
    GT       shift, and go to state 107
    GE       shift, and go to state 108
    PLUS     shift, and go to state 109
    MINUS    shift, and go to state 110
    STAR     shift, and go to state 111
    SLASH    shift, and go to state 112
    L_AND    shift, and go to state 113
    L_OR     shift, and go to state 114
    PLUS_EQ  shift, and go to state 115
    MIN_EQ   shift, and go to state 116
    MUL_EQ   shift, and go to state 117
    DIV_EQ   shift, and go to state 118
    DOT      shift, and go to state 120

    DOT       [reduce using rule 73 (bin_op_expr)]
    $default  reduce using rule 73 (bin_op_expr)

    shift/reduce conflict on token DOT:
       73 bin_op_expr: expr MUL_EQ expr •
       84 tuple_index_expr: expr • DOT DEC_LITERAL
      Example: expr MUL_EQ expr • DOT DEC_LITERAL
      Shift derivation
        expr_wo_block
        ↳ 95: bin_op_expr
              ↳ 73: expr MUL_EQ expr
                                ↳ 86: expr_wo_block
                                      ↳ 96: tuple_index_expr
                                            ↳ 84: expr • DOT DEC_LITERAL
      Reduce derivation
        expr_wo_block
        ↳ 96: tuple_index_expr
              ↳ 84: expr                                 DOT DEC_LITERAL
                    ↳ 86: expr_wo_block
                          ↳ 95: bin_op_expr
                                ↳ 73: expr MUL_EQ expr •



State 153

   57 bin_op_expr: expr • PLUS expr
   58            | expr • MINUS expr
   59            | expr • STAR expr
   60            | expr • SLASH expr
   61            | expr • L_AND expr
   62            | expr • L_OR expr
   63            | expr • EQEQ expr
   64            | expr • NE expr
   65            | expr • LT expr
   66            | expr • GT expr
   67            | expr • GE expr
   68            | expr • LE expr
   69            | expr • EQ expr
   70            | expr • PLUS_EQ expr
   71            | expr • MIN_EQ expr
   72            | expr • DIV_EQ expr
   72            | expr DIV_EQ expr •
   73            | expr • MUL_EQ expr
   84 tuple_index_expr: expr • DOT DEC_LITERAL

    EQ       shift, and go to state 102
    EQEQ     shift, and go to state 103
    NE       shift, and go to state 104
    LT       shift, and go to state 105
    LE       shift, and go to state 106
    GT       shift, and go to state 107
    GE       shift, and go to state 108
    PLUS     shift, and go to state 109
    MINUS    shift, and go to state 110
    STAR     shift, and go to state 111
    SLASH    shift, and go to state 112
    L_AND    shift, and go to state 113
    L_OR     shift, and go to state 114
    PLUS_EQ  shift, and go to state 115
    MIN_EQ   shift, and go to state 116
    MUL_EQ   shift, and go to state 117
    DIV_EQ   shift, and go to state 118
    DOT      shift, and go to state 120

    DOT       [reduce using rule 72 (bin_op_expr)]
    $default  reduce using rule 72 (bin_op_expr)

    shift/reduce conflict on token DOT:
       72 bin_op_expr: expr DIV_EQ expr •
       84 tuple_index_expr: expr • DOT DEC_LITERAL
      Example: expr DIV_EQ expr • DOT DEC_LITERAL
      Shift derivation
        expr_wo_block
        ↳ 95: bin_op_expr
              ↳ 72: expr DIV_EQ expr
                                ↳ 86: expr_wo_block
                                      ↳ 96: tuple_index_expr
                                            ↳ 84: expr • DOT DEC_LITERAL
      Reduce derivation
        expr_wo_block
        ↳ 96: tuple_index_expr
              ↳ 84: expr                                 DOT DEC_LITERAL
                    ↳ 86: expr_wo_block
                          ↳ 95: bin_op_expr
                                ↳ 72: expr DIV_EQ expr •



State 154

   84 tuple_index_expr: expr DOT DEC_LITERAL •

    $default  reduce using rule 84 (tuple_index_expr)


State 155

   33 type_list: type_list COMMA type •

    $default  reduce using rule 33 (type_list)


State 156

   79 call_expr_args: call_expr_args COMMA • expr

    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    WHILE          shift, and go to state 43
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    LPAREN         shift, and go to state 53
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 164
    expr_w_block      go to state 83
    expr_wo_block     go to state 84


State 157

   81 call_expr: IDENTIFIER LPAREN call_expr_args RPAREN •

    $default  reduce using rule 81 (call_expr)


State 158

   22 type_decl: COLON • type
   23          | COLON • error

    error   shift, and go to state 165
    I8      shift, and go to state 23
    I16     shift, and go to state 24
    I32     shift, and go to state 25
    I64     shift, and go to state 26
    ISIZE   shift, and go to state 27
    U8      shift, and go to state 28
    U16     shift, and go to state 29
    U32     shift, and go to state 30
    U64     shift, and go to state 31
    USIZE   shift, and go to state 32
    BOOL    shift, and go to state 33
    LPAREN  shift, and go to state 34

    type  go to state 166


State 159

   28 let: LET opt_mut ident type_decl • EQ expr SEMICOLON
   29    | LET opt_mut ident type_decl • SEMICOLON

    EQ         shift, and go to state 167
    SEMICOLON  shift, and go to state 168


State 160

   21 print_ln: PRINT_LN LPAREN STR_LITERAL RPAREN •

    $default  reduce using rule 21 (print_ln)


State 161

   31 if_expr: IF expr block_expr ELSE • if_expr
   32        | IF expr block_expr ELSE • block_expr

    IF      shift, and go to state 48
    LBRACE  shift, and go to state 18

    if_expr     go to state 169
    block_expr  go to state 170


State 162

   57 bin_op_expr: expr • PLUS expr
   58            | expr • MINUS expr
   59            | expr • STAR expr
   60            | expr • SLASH expr
   61            | expr • L_AND expr
   62            | expr • L_OR expr
   63            | expr • EQEQ expr
   64            | expr • NE expr
   65            | expr • LT expr
   66            | expr • GT expr
   67            | expr • GE expr
   68            | expr • LE expr
   69            | expr • EQ expr
   70            | expr • PLUS_EQ expr
   71            | expr • MIN_EQ expr
   72            | expr • DIV_EQ expr
   73            | expr • MUL_EQ expr
   84 tuple_index_expr: expr • DOT DEC_LITERAL
   87 expr_list: expr_list COMMA expr •

    EQ       shift, and go to state 102
    EQEQ     shift, and go to state 103
    NE       shift, and go to state 104
    LT       shift, and go to state 105
    LE       shift, and go to state 106
    GT       shift, and go to state 107
    GE       shift, and go to state 108
    PLUS     shift, and go to state 109
    MINUS    shift, and go to state 110
    STAR     shift, and go to state 111
    SLASH    shift, and go to state 112
    L_AND    shift, and go to state 113
    L_OR     shift, and go to state 114
    PLUS_EQ  shift, and go to state 115
    MIN_EQ   shift, and go to state 116
    MUL_EQ   shift, and go to state 117
    DIV_EQ   shift, and go to state 118
    DOT      shift, and go to state 120

    $default  reduce using rule 87 (expr_list)


State 163

  104 expr_wo_block: LPAREN expr_list opt_comma RPAREN •

    $default  reduce using rule 104 (expr_wo_block)


State 164

   57 bin_op_expr: expr • PLUS expr
   58            | expr • MINUS expr
   59            | expr • STAR expr
   60            | expr • SLASH expr
   61            | expr • L_AND expr
   62            | expr • L_OR expr
   63            | expr • EQEQ expr
   64            | expr • NE expr
   65            | expr • LT expr
   66            | expr • GT expr
   67            | expr • GE expr
   68            | expr • LE expr
   69            | expr • EQ expr
   70            | expr • PLUS_EQ expr
   71            | expr • MIN_EQ expr
   72            | expr • DIV_EQ expr
   73            | expr • MUL_EQ expr
   79 call_expr_args: call_expr_args COMMA expr •
   84 tuple_index_expr: expr • DOT DEC_LITERAL

    EQ       shift, and go to state 102
    EQEQ     shift, and go to state 103
    NE       shift, and go to state 104
    LT       shift, and go to state 105
    LE       shift, and go to state 106
    GT       shift, and go to state 107
    GE       shift, and go to state 108
    PLUS     shift, and go to state 109
    MINUS    shift, and go to state 110
    STAR     shift, and go to state 111
    SLASH    shift, and go to state 112
    L_AND    shift, and go to state 113
    L_OR     shift, and go to state 114
    PLUS_EQ  shift, and go to state 115
    MIN_EQ   shift, and go to state 116
    MUL_EQ   shift, and go to state 117
    DIV_EQ   shift, and go to state 118
    DOT      shift, and go to state 120

    $default  reduce using rule 79 (call_expr_args)


State 165

   23 type_decl: COLON error •

    $default  reduce using rule 23 (type_decl)


State 166

   22 type_decl: COLON type •

    $default  reduce using rule 22 (type_decl)


State 167

   28 let: LET opt_mut ident type_decl EQ • expr SEMICOLON

    DEC_LITERAL    shift, and go to state 36
    FLOAT_LITERAL  shift, and go to state 37
    STR_LITERAL    shift, and go to state 38
    TRUE           shift, and go to state 39
    FALSE          shift, and go to state 40
    IDENTIFIER     shift, and go to state 41
    WHILE          shift, and go to state 43
    BANG           shift, and go to state 45
    MINUS          shift, and go to state 46
    STAR           shift, and go to state 47
    IF             shift, and go to state 48
    RETURN         shift, and go to state 49
    BREAK          shift, and go to state 50
    CONTINUE       shift, and go to state 51
    LBRACE         shift, and go to state 18
    LPAREN         shift, and go to state 53
    AMPERSAND      shift, and go to state 55
    AMPERSAND_MUT  shift, and go to state 56

    if_expr           go to state 62
    block_expr        go to state 63
    unary_op_expr     go to state 64
    bin_op_expr       go to state 65
    literal           go to state 66
    call_expr         go to state 67
    while_expr        go to state 68
    tuple_index_expr  go to state 69
    expr              go to state 171
    expr_w_block      go to state 83
    expr_wo_block     go to state 84


State 168

   29 let: LET opt_mut ident type_decl SEMICOLON •

    $default  reduce using rule 29 (let)


State 169

   31 if_expr: IF expr block_expr ELSE if_expr •

    $default  reduce using rule 31 (if_expr)


State 170

   32 if_expr: IF expr block_expr ELSE block_expr •

    $default  reduce using rule 32 (if_expr)


State 171

   28 let: LET opt_mut ident type_decl EQ expr • SEMICOLON
   57 bin_op_expr: expr • PLUS expr
   58            | expr • MINUS expr
   59            | expr • STAR expr
   60            | expr • SLASH expr
   61            | expr • L_AND expr
   62            | expr • L_OR expr
   63            | expr • EQEQ expr
   64            | expr • NE expr
   65            | expr • LT expr
   66            | expr • GT expr
   67            | expr • GE expr
   68            | expr • LE expr
   69            | expr • EQ expr
   70            | expr • PLUS_EQ expr
   71            | expr • MIN_EQ expr
   72            | expr • DIV_EQ expr
   73            | expr • MUL_EQ expr
   84 tuple_index_expr: expr • DOT DEC_LITERAL

    EQ         shift, and go to state 102
    EQEQ       shift, and go to state 103
    NE         shift, and go to state 104
    LT         shift, and go to state 105
    LE         shift, and go to state 106
    GT         shift, and go to state 107
    GE         shift, and go to state 108
    PLUS       shift, and go to state 109
    MINUS      shift, and go to state 110
    STAR       shift, and go to state 111
    SLASH      shift, and go to state 112
    L_AND      shift, and go to state 113
    L_OR       shift, and go to state 114
    PLUS_EQ    shift, and go to state 115
    MIN_EQ     shift, and go to state 116
    MUL_EQ     shift, and go to state 117
    DIV_EQ     shift, and go to state 118
    SEMICOLON  shift, and go to state 172
    DOT        shift, and go to state 120


State 172

   28 let: LET opt_mut ident type_decl EQ expr SEMICOLON •

    $default  reduce using rule 28 (let)
